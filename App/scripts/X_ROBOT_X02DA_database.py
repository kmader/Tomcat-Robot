#!/usr/bin/env python
import sys
import os



# hard code dimensions, just in case
trayX=6
trayY=10
tArray=['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P']
ExpertUserIds={}
#ExpertUserIds['E12050']=1
ExpertUserIds['X02DAOP']=1
# Beginning of Kevin's Code
try:
    from numpy import array
    useSort=True
except:
    print 'Numpy Not Installed Will Not Be Sorted'
    useSort=False
try:
    UserId=os.path.expandvars('$USER')
    
    if ExpertUserIds.has_key(UserId.upper()):
        expertMode=1
    else:
        expertMode=0
    sys.path.insert (0, "/work/sls/bin/")
    sys.path.insert (0, "/work/sls/bin/ZSI/")
    import ZSI
    import ZSI.TCcompound
    from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
    from ZSI.generate.pyclass import pyclass_type
except:
    print 'ZSI Not properly installed'
DBVersion=20100416
print "Using X02DA Database Library Version : "+str(DBVersion)+" with user:"+UserId
#ksm - Beginning of TYPES file (1)

##################################################
# file: EpmsDatabaseManagerService_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    ./wsdl2py --complexType EpmsDatabaseManagerService?wsdl
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# http://ws.epms.sls.psi.ch/
##############################

class ns0:
    targetNamespace = "http://ws.epms.sls.psi.ch/"

    class getTrayId_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.epms.sls.psi.ch/"
        type = (schema, "getTrayId")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getTrayId_Def.schema
            TClist = [ZSI.TC.String(pname="userId", aname="_userId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sampleName", aname="_sampleName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._userId = None
                    self._sampleName = None
                    return
            Holder.__name__ = "getTrayId_Holder"
            self.pyclass = Holder

    class getTrayIdResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.epms.sls.psi.ch/"
        type = (schema, "getTrayIdResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getTrayIdResponse_Def.schema
            TClist = [ZSI.TC.String(pname="trayId", aname="_trayId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._trayId = None
                    return
            Holder.__name__ = "getTrayIdResponse_Holder"
            self.pyclass = Holder

    class getSampleNames_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.epms.sls.psi.ch/"
        type = (schema, "getSampleNames")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getSampleNames_Def.schema
            TClist = [ZSI.TC.String(pname="userId", aname="_userId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._userId = None
                    return
            Holder.__name__ = "getSampleNames_Holder"
            self.pyclass = Holder

    class getSampleNamesResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.epms.sls.psi.ch/"
        type = (schema, "getSampleNamesResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getSampleNamesResponse_Def.schema
            TClist = [ZSI.TC.String(pname="sampleNames", aname="_sampleNames", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sampleNames = []
                    return
            Holder.__name__ = "getSampleNamesResponse_Holder"
            self.pyclass = Holder

    class getSample_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.epms.sls.psi.ch/"
        type = (schema, "getSample")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getSample_Def.schema
            TClist = [ZSI.TC.String(pname="userId", aname="_userId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sampleName", aname="_sampleName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._userId = None
                    self._sampleName = None
                    return
            Holder.__name__ = "getSample_Holder"
            self.pyclass = Holder

    class getSampleResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.epms.sls.psi.ch/"
        type = (schema, "getSampleResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getSampleResponse_Def.schema
            TClist = [GTD("http://ws.epms.sls.psi.ch/","sampleVO",lazy=False)(pname="sample", aname="_sample", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sample = None
                    return
            Holder.__name__ = "getSampleResponse_Holder"
            self.pyclass = Holder

    class sampleVO_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.epms.sls.psi.ch/"
        type = (schema, "sampleVO")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.sampleVO_Def.schema
            TClist = [ZSI.TC.String(pname="comment", aname="_comment", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://ws.epms.sls.psi.ch/","pointOfInterestVO",lazy=False)(pname="pointOfInterests", aname="_pointOfInterests", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="userid", aname="_userid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._comment = None
                    self._name = None
                    self._pointOfInterests = []
                    self._userid = None
                    return
            Holder.__name__ = "sampleVO_Holder"
            self.pyclass = Holder

    class pointOfInterestVO_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.epms.sls.psi.ch/"
        type = (schema, "pointOfInterestVO")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.pointOfInterestVO_Def.schema
            TClist = [ZSI.TC.String(pname="comment", aname="_comment", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://ws.epms.sls.psi.ch/","coordinatesVO",lazy=False)(pname="coordinates", aname="_coordinates", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._comment = None
                    self._coordinates = None
                    self._name = None
                    return
            Holder.__name__ = "pointOfInterestVO_Holder"
            self.pyclass = Holder

    class coordinatesVO_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.epms.sls.psi.ch/"
        type = (schema, "coordinatesVO")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.coordinatesVO_Def.schema
            TClist = [ZSI.TC.String(pname="coordinateSystem", aname="_coordinateSystem", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="goniometerXX", aname="_goniometerXX", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="goniometerZZ", aname="_goniometerZZ", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="x", aname="_x", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="xx", aname="_xx", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="y", aname="_y", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="z", aname="_z", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="zz", aname="_zz", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._coordinateSystem = None
                    self._goniometerXX = None
                    self._goniometerZZ = None
                    self._x = None
                    self._xx = None
                    self._y = None
                    self._z = None
                    self._zz = None
                    return
            Holder.__name__ = "coordinatesVO_Holder"
            self.pyclass = Holder

    class Exception_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.epms.sls.psi.ch/"
        type = (schema, "Exception")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Exception_Def.schema
            TClist = [ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._message = None
                    return
            Holder.__name__ = "Exception_Holder"
            self.pyclass = Holder

    class getTrayIds_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.epms.sls.psi.ch/"
        type = (schema, "getTrayIds")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getTrayIds_Def.schema
            TClist = [ZSI.TC.String(pname="userId", aname="_userId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._userId = None
                    return
            Holder.__name__ = "getTrayIds_Holder"
            self.pyclass = Holder

    class getTrayIdsResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.epms.sls.psi.ch/"
        type = (schema, "getTrayIdsResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getTrayIdsResponse_Def.schema
            TClist = [ZSI.TC.String(pname="trayIds", aname="_trayIds", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._trayIds = []
                    return
            Holder.__name__ = "getTrayIdsResponse_Holder"
            self.pyclass = Holder

    class getSampleStatus_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.epms.sls.psi.ch/"
        type = (schema, "getSampleStatus")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getSampleStatus_Def.schema
            TClist = [ZSI.TC.String(pname="userId", aname="_userId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sampleName", aname="_sampleName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._userId = None
                    self._sampleName = None
                    return
            Holder.__name__ = "getSampleStatus_Holder"
            self.pyclass = Holder

    class getSampleStatusResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.epms.sls.psi.ch/"
        type = (schema, "getSampleStatusResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getSampleStatusResponse_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="sampleStatus", aname="_sampleStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sampleStatus = None
                    return
            Holder.__name__ = "getSampleStatusResponse_Holder"
            self.pyclass = Holder

    class setSample_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.epms.sls.psi.ch/"
        type = (schema, "setSample")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.setSample_Def.schema
            TClist = [GTD("http://ws.epms.sls.psi.ch/","sampleVO",lazy=False)(pname="sample", aname="_sample", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sample = None
                    return
            Holder.__name__ = "setSample_Holder"
            self.pyclass = Holder

    class setSampleResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.epms.sls.psi.ch/"
        type = (schema, "setSampleResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.setSampleResponse_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "setSampleResponse_Holder"
            self.pyclass = Holder

    class test_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.epms.sls.psi.ch/"
        type = (schema, "test")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.test_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "test_Holder"
            self.pyclass = Holder

    class testResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.epms.sls.psi.ch/"
        type = (schema, "testResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.testResponse_Def.schema
            TClist = [ZSI.TC.String(pname="testString", aname="_testString", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._testString = None
                    return
            Holder.__name__ = "testResponse_Holder"
            self.pyclass = Holder

    class getTray_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.epms.sls.psi.ch/"
        type = (schema, "getTray")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getTray_Def.schema
            TClist = [ZSI.TC.String(pname="trayId", aname="_trayId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._trayId = None
                    return
            Holder.__name__ = "getTray_Holder"
            self.pyclass = Holder

    class getTrayResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.epms.sls.psi.ch/"
        type = (schema, "getTrayResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getTrayResponse_Def.schema
            TClist = [GTD("http://ws.epms.sls.psi.ch/","trayVO",lazy=False)(pname="tray", aname="_tray", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._tray = None
                    return
            Holder.__name__ = "getTrayResponse_Holder"
            self.pyclass = Holder

    class trayVO_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.epms.sls.psi.ch/"
        type = (schema, "trayVO")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.trayVO_Def.schema
            TClist = [ZSI.TC.String(pname="id", aname="_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://ws.epms.sls.psi.ch/","trayPositionVO",lazy=False)(pname="positions", aname="_positions", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="script", aname="_script", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._positions = []
                    self._script = None
                    return
            Holder.__name__ = "trayVO_Holder"
            self.pyclass = Holder

    class trayPositionVO_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.epms.sls.psi.ch/"
        type = (schema, "trayPositionVO")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.trayPositionVO_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="column", aname="_column", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="row", aname="_row", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sampleName", aname="_sampleName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="userId", aname="_userId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._column = None
                    self._row = None
                    self._sampleName = None
                    self._userId = None
                    return
            Holder.__name__ = "trayPositionVO_Holder"
            self.pyclass = Holder

    class setTray_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.epms.sls.psi.ch/"
        type = (schema, "setTray")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.setTray_Def.schema
            TClist = [GTD("http://ws.epms.sls.psi.ch/","trayVO",lazy=False)(pname="tray", aname="_tray", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._tray = None
                    return
            Holder.__name__ = "setTray_Holder"
            self.pyclass = Holder

    class setTrayResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.epms.sls.psi.ch/"
        type = (schema, "setTrayResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.setTrayResponse_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "setTrayResponse_Holder"
            self.pyclass = Holder

    class removeTray_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.epms.sls.psi.ch/"
        type = (schema, "removeTray")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.removeTray_Def.schema
            TClist = [ZSI.TC.String(pname="trayId", aname="_trayId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._trayId = None
                    return
            Holder.__name__ = "removeTray_Holder"
            self.pyclass = Holder

    class removeTrayResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.epms.sls.psi.ch/"
        type = (schema, "removeTrayResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.removeTrayResponse_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "removeTrayResponse_Holder"
            self.pyclass = Holder

    class getUserIds_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.epms.sls.psi.ch/"
        type = (schema, "getUserIds")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getUserIds_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "getUserIds_Holder"
            self.pyclass = Holder

    class getUserIdsResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.epms.sls.psi.ch/"
        type = (schema, "getUserIdsResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getUserIdsResponse_Def.schema
            TClist = [ZSI.TC.String(pname="userIds", aname="_userIds", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._userIds = []
                    return
            Holder.__name__ = "getUserIdsResponse_Holder"
            self.pyclass = Holder

    class Exception_Dec(ElementDeclaration):
        literal = "Exception"
        schema = "http://ws.epms.sls.psi.ch/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://ws.epms.sls.psi.ch/","Exception")
            kw["aname"] = "_Exception"
            if ns0.Exception_Def not in ns0.Exception_Dec.__bases__:
                bases = list(ns0.Exception_Dec.__bases__)
                bases.insert(0, ns0.Exception_Def)
                ns0.Exception_Dec.__bases__ = tuple(bases)

            ns0.Exception_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "Exception_Dec_Holder"

    class getSample_Dec(ElementDeclaration):
        literal = "getSample"
        schema = "http://ws.epms.sls.psi.ch/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://ws.epms.sls.psi.ch/","getSample")
            kw["aname"] = "_getSample"
            if ns0.getSample_Def not in ns0.getSample_Dec.__bases__:
                bases = list(ns0.getSample_Dec.__bases__)
                bases.insert(0, ns0.getSample_Def)
                ns0.getSample_Dec.__bases__ = tuple(bases)

            ns0.getSample_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getSample_Dec_Holder"

    class getSampleNames_Dec(ElementDeclaration):
        literal = "getSampleNames"
        schema = "http://ws.epms.sls.psi.ch/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://ws.epms.sls.psi.ch/","getSampleNames")
            kw["aname"] = "_getSampleNames"
            if ns0.getSampleNames_Def not in ns0.getSampleNames_Dec.__bases__:
                bases = list(ns0.getSampleNames_Dec.__bases__)
                bases.insert(0, ns0.getSampleNames_Def)
                ns0.getSampleNames_Dec.__bases__ = tuple(bases)

            ns0.getSampleNames_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getSampleNames_Dec_Holder"

    class getSampleNamesResponse_Dec(ElementDeclaration):
        literal = "getSampleNamesResponse"
        schema = "http://ws.epms.sls.psi.ch/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://ws.epms.sls.psi.ch/","getSampleNamesResponse")
            kw["aname"] = "_getSampleNamesResponse"
            if ns0.getSampleNamesResponse_Def not in ns0.getSampleNamesResponse_Dec.__bases__:
                bases = list(ns0.getSampleNamesResponse_Dec.__bases__)
                bases.insert(0, ns0.getSampleNamesResponse_Def)
                ns0.getSampleNamesResponse_Dec.__bases__ = tuple(bases)

            ns0.getSampleNamesResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getSampleNamesResponse_Dec_Holder"

    class getSampleResponse_Dec(ElementDeclaration):
        literal = "getSampleResponse"
        schema = "http://ws.epms.sls.psi.ch/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://ws.epms.sls.psi.ch/","getSampleResponse")
            kw["aname"] = "_getSampleResponse"
            if ns0.getSampleResponse_Def not in ns0.getSampleResponse_Dec.__bases__:
                bases = list(ns0.getSampleResponse_Dec.__bases__)
                bases.insert(0, ns0.getSampleResponse_Def)
                ns0.getSampleResponse_Dec.__bases__ = tuple(bases)

            ns0.getSampleResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getSampleResponse_Dec_Holder"

    class getSampleStatus_Dec(ElementDeclaration):
        literal = "getSampleStatus"
        schema = "http://ws.epms.sls.psi.ch/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://ws.epms.sls.psi.ch/","getSampleStatus")
            kw["aname"] = "_getSampleStatus"
            if ns0.getSampleStatus_Def not in ns0.getSampleStatus_Dec.__bases__:
                bases = list(ns0.getSampleStatus_Dec.__bases__)
                bases.insert(0, ns0.getSampleStatus_Def)
                ns0.getSampleStatus_Dec.__bases__ = tuple(bases)

            ns0.getSampleStatus_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getSampleStatus_Dec_Holder"

    class getSampleStatusResponse_Dec(ElementDeclaration):
        literal = "getSampleStatusResponse"
        schema = "http://ws.epms.sls.psi.ch/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://ws.epms.sls.psi.ch/","getSampleStatusResponse")
            kw["aname"] = "_getSampleStatusResponse"
            if ns0.getSampleStatusResponse_Def not in ns0.getSampleStatusResponse_Dec.__bases__:
                bases = list(ns0.getSampleStatusResponse_Dec.__bases__)
                bases.insert(0, ns0.getSampleStatusResponse_Def)
                ns0.getSampleStatusResponse_Dec.__bases__ = tuple(bases)

            ns0.getSampleStatusResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getSampleStatusResponse_Dec_Holder"

    class getTray_Dec(ElementDeclaration):
        literal = "getTray"
        schema = "http://ws.epms.sls.psi.ch/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://ws.epms.sls.psi.ch/","getTray")
            kw["aname"] = "_getTray"
            if ns0.getTray_Def not in ns0.getTray_Dec.__bases__:
                bases = list(ns0.getTray_Dec.__bases__)
                bases.insert(0, ns0.getTray_Def)
                ns0.getTray_Dec.__bases__ = tuple(bases)

            ns0.getTray_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getTray_Dec_Holder"

    class getTrayId_Dec(ElementDeclaration):
        literal = "getTrayId"
        schema = "http://ws.epms.sls.psi.ch/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://ws.epms.sls.psi.ch/","getTrayId")
            kw["aname"] = "_getTrayId"
            if ns0.getTrayId_Def not in ns0.getTrayId_Dec.__bases__:
                bases = list(ns0.getTrayId_Dec.__bases__)
                bases.insert(0, ns0.getTrayId_Def)
                ns0.getTrayId_Dec.__bases__ = tuple(bases)

            ns0.getTrayId_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getTrayId_Dec_Holder"

    class getTrayIdResponse_Dec(ElementDeclaration):
        literal = "getTrayIdResponse"
        schema = "http://ws.epms.sls.psi.ch/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://ws.epms.sls.psi.ch/","getTrayIdResponse")
            kw["aname"] = "_getTrayIdResponse"
            if ns0.getTrayIdResponse_Def not in ns0.getTrayIdResponse_Dec.__bases__:
                bases = list(ns0.getTrayIdResponse_Dec.__bases__)
                bases.insert(0, ns0.getTrayIdResponse_Def)
                ns0.getTrayIdResponse_Dec.__bases__ = tuple(bases)

            ns0.getTrayIdResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getTrayIdResponse_Dec_Holder"

    class getTrayIds_Dec(ElementDeclaration):
        literal = "getTrayIds"
        schema = "http://ws.epms.sls.psi.ch/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://ws.epms.sls.psi.ch/","getTrayIds")
            kw["aname"] = "_getTrayIds"
            if ns0.getTrayIds_Def not in ns0.getTrayIds_Dec.__bases__:
                bases = list(ns0.getTrayIds_Dec.__bases__)
                bases.insert(0, ns0.getTrayIds_Def)
                ns0.getTrayIds_Dec.__bases__ = tuple(bases)

            ns0.getTrayIds_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getTrayIds_Dec_Holder"

    class getTrayIdsResponse_Dec(ElementDeclaration):
        literal = "getTrayIdsResponse"
        schema = "http://ws.epms.sls.psi.ch/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://ws.epms.sls.psi.ch/","getTrayIdsResponse")
            kw["aname"] = "_getTrayIdsResponse"
            if ns0.getTrayIdsResponse_Def not in ns0.getTrayIdsResponse_Dec.__bases__:
                bases = list(ns0.getTrayIdsResponse_Dec.__bases__)
                bases.insert(0, ns0.getTrayIdsResponse_Def)
                ns0.getTrayIdsResponse_Dec.__bases__ = tuple(bases)

            ns0.getTrayIdsResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getTrayIdsResponse_Dec_Holder"

    class getTrayResponse_Dec(ElementDeclaration):
        literal = "getTrayResponse"
        schema = "http://ws.epms.sls.psi.ch/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://ws.epms.sls.psi.ch/","getTrayResponse")
            kw["aname"] = "_getTrayResponse"
            if ns0.getTrayResponse_Def not in ns0.getTrayResponse_Dec.__bases__:
                bases = list(ns0.getTrayResponse_Dec.__bases__)
                bases.insert(0, ns0.getTrayResponse_Def)
                ns0.getTrayResponse_Dec.__bases__ = tuple(bases)

            ns0.getTrayResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getTrayResponse_Dec_Holder"

    class getUserIds_Dec(ElementDeclaration):
        literal = "getUserIds"
        schema = "http://ws.epms.sls.psi.ch/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://ws.epms.sls.psi.ch/","getUserIds")
            kw["aname"] = "_getUserIds"
            if ns0.getUserIds_Def not in ns0.getUserIds_Dec.__bases__:
                bases = list(ns0.getUserIds_Dec.__bases__)
                bases.insert(0, ns0.getUserIds_Def)
                ns0.getUserIds_Dec.__bases__ = tuple(bases)

            ns0.getUserIds_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getUserIds_Dec_Holder"

    class getUserIdsResponse_Dec(ElementDeclaration):
        literal = "getUserIdsResponse"
        schema = "http://ws.epms.sls.psi.ch/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://ws.epms.sls.psi.ch/","getUserIdsResponse")
            kw["aname"] = "_getUserIdsResponse"
            if ns0.getUserIdsResponse_Def not in ns0.getUserIdsResponse_Dec.__bases__:
                bases = list(ns0.getUserIdsResponse_Dec.__bases__)
                bases.insert(0, ns0.getUserIdsResponse_Def)
                ns0.getUserIdsResponse_Dec.__bases__ = tuple(bases)

            ns0.getUserIdsResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getUserIdsResponse_Dec_Holder"

    class removeTray_Dec(ElementDeclaration):
        literal = "removeTray"
        schema = "http://ws.epms.sls.psi.ch/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://ws.epms.sls.psi.ch/","removeTray")
            kw["aname"] = "_removeTray"
            if ns0.removeTray_Def not in ns0.removeTray_Dec.__bases__:
                bases = list(ns0.removeTray_Dec.__bases__)
                bases.insert(0, ns0.removeTray_Def)
                ns0.removeTray_Dec.__bases__ = tuple(bases)

            ns0.removeTray_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "removeTray_Dec_Holder"

    class removeTrayResponse_Dec(ElementDeclaration):
        literal = "removeTrayResponse"
        schema = "http://ws.epms.sls.psi.ch/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://ws.epms.sls.psi.ch/","removeTrayResponse")
            kw["aname"] = "_removeTrayResponse"
            if ns0.removeTrayResponse_Def not in ns0.removeTrayResponse_Dec.__bases__:
                bases = list(ns0.removeTrayResponse_Dec.__bases__)
                bases.insert(0, ns0.removeTrayResponse_Def)
                ns0.removeTrayResponse_Dec.__bases__ = tuple(bases)

            ns0.removeTrayResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "removeTrayResponse_Dec_Holder"

    class setSample_Dec(ElementDeclaration):
        literal = "setSample"
        schema = "http://ws.epms.sls.psi.ch/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://ws.epms.sls.psi.ch/","setSample")
            kw["aname"] = "_setSample"
            if ns0.setSample_Def not in ns0.setSample_Dec.__bases__:
                bases = list(ns0.setSample_Dec.__bases__)
                bases.insert(0, ns0.setSample_Def)
                ns0.setSample_Dec.__bases__ = tuple(bases)

            ns0.setSample_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "setSample_Dec_Holder"

    class setSampleResponse_Dec(ElementDeclaration):
        literal = "setSampleResponse"
        schema = "http://ws.epms.sls.psi.ch/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://ws.epms.sls.psi.ch/","setSampleResponse")
            kw["aname"] = "_setSampleResponse"
            if ns0.setSampleResponse_Def not in ns0.setSampleResponse_Dec.__bases__:
                bases = list(ns0.setSampleResponse_Dec.__bases__)
                bases.insert(0, ns0.setSampleResponse_Def)
                ns0.setSampleResponse_Dec.__bases__ = tuple(bases)

            ns0.setSampleResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "setSampleResponse_Dec_Holder"

    class setTray_Dec(ElementDeclaration):
        literal = "setTray"
        schema = "http://ws.epms.sls.psi.ch/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://ws.epms.sls.psi.ch/","setTray")
            kw["aname"] = "_setTray"
            if ns0.setTray_Def not in ns0.setTray_Dec.__bases__:
                bases = list(ns0.setTray_Dec.__bases__)
                bases.insert(0, ns0.setTray_Def)
                ns0.setTray_Dec.__bases__ = tuple(bases)

            ns0.setTray_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "setTray_Dec_Holder"

    class setTrayResponse_Dec(ElementDeclaration):
        literal = "setTrayResponse"
        schema = "http://ws.epms.sls.psi.ch/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://ws.epms.sls.psi.ch/","setTrayResponse")
            kw["aname"] = "_setTrayResponse"
            if ns0.setTrayResponse_Def not in ns0.setTrayResponse_Dec.__bases__:
                bases = list(ns0.setTrayResponse_Dec.__bases__)
                bases.insert(0, ns0.setTrayResponse_Def)
                ns0.setTrayResponse_Dec.__bases__ = tuple(bases)

            ns0.setTrayResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "setTrayResponse_Dec_Holder"

    class test_Dec(ElementDeclaration):
        literal = "test"
        schema = "http://ws.epms.sls.psi.ch/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://ws.epms.sls.psi.ch/","test")
            kw["aname"] = "_test"
            if ns0.test_Def not in ns0.test_Dec.__bases__:
                bases = list(ns0.test_Dec.__bases__)
                bases.insert(0, ns0.test_Def)
                ns0.test_Dec.__bases__ = tuple(bases)

            ns0.test_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "test_Dec_Holder"

    class testResponse_Dec(ElementDeclaration):
        literal = "testResponse"
        schema = "http://ws.epms.sls.psi.ch/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://ws.epms.sls.psi.ch/","testResponse")
            kw["aname"] = "_testResponse"
            if ns0.testResponse_Def not in ns0.testResponse_Dec.__bases__:
                bases = list(ns0.testResponse_Dec.__bases__)
                bases.insert(0, ns0.testResponse_Def)
                ns0.testResponse_Dec.__bases__ = tuple(bases)

            ns0.testResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "testResponse_Dec_Holder"

# end class ns0 (tns: http://ws.epms.sls.psi.ch/)


#ksm-Beginning of CLIENT file (2)

##################################################
# file: EpmsDatabaseManagerService_client.py
# 
# client stubs generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#     ./wsdl2py --complexType EpmsDatabaseManagerService?wsdl
# 
##################################################

#from EpmsDatabaseManagerService_types import *
import urlparse, types
from ZSI.TCcompound import ComplexType, Struct
from ZSI import client
from ZSI.schema import GED, GTD
import ZSI
from ZSI.generate.pyclass import pyclass_type

# Locator
class EpmsDatabaseManagerServiceLocator:
    EpmsDatabaseManagerPort_address = "http://localhost:8080/ch.psi.sls.epms.ws/EpmsDatabaseManagerService"
    def getEpmsDatabaseManagerPortAddress(self):
        return EpmsDatabaseManagerServiceLocator.EpmsDatabaseManagerPort_address
    def getEpmsDatabaseManagerPort(self, url=None, **kw):
        return EpmsDatabaseManagerPortBindingSOAP(url or EpmsDatabaseManagerServiceLocator.EpmsDatabaseManagerPort_address, **kw)

# Methods
class EpmsDatabaseManagerPortBindingSOAP:
    def __init__(self, url, **kw):
        kw.setdefault("readerclass", None)
        kw.setdefault("writerclass", None)
        # no resource properties
        self.binding = client.Binding(url=url, **kw)
        # no ws-addressing

    # op: getUserIds
    def getUserIds(self, request, **kw):
        if isinstance(request, getUserIds) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getUserIdsResponse.typecode)
        return response

    # op: getTray
    def getTray(self, request, **kw):
        if isinstance(request, getTray) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getTrayResponse.typecode)
        return response

    # op: setTray
    def setTray(self, request, **kw):
        if isinstance(request, setTray) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(setTrayResponse.typecode)
        return response

    # op: getTrayId
    def getTrayId(self, request, **kw):
        if isinstance(request, getTrayId) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getTrayIdResponse.typecode)
        return response

    # op: getTrayIds
    def getTrayIds(self, request, **kw):
        if isinstance(request, getTrayIds) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getTrayIdsResponse.typecode)
        return response

    # op: removeTray
    def removeTray(self, request, **kw):
        if isinstance(request, removeTray) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(removeTrayResponse.typecode)
        return response

    # op: getSampleNames
    def getSampleNames(self, request, **kw):
        if isinstance(request, getSampleNames) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getSampleNamesResponse.typecode)
        return response

    # op: getSampleStatus
    def getSampleStatus(self, request, **kw):
        if isinstance(request, getSampleStatus) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getSampleStatusResponse.typecode)
        return response

    # op: test
    def test(self, request, **kw):
        if isinstance(request, test) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(testResponse.typecode)
        return response

    # op: getSample
    def getSample(self, request, **kw):
        if isinstance(request, getSample) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getSampleResponse.typecode)
        return response

    # op: setSample
    def setSample(self, request, **kw):
        if isinstance(request, setSample) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(setSampleResponse.typecode)
        return response

getUserIds = GED("http://ws.epms.sls.psi.ch/", "getUserIds").pyclass

getUserIdsResponse = GED("http://ws.epms.sls.psi.ch/", "getUserIdsResponse").pyclass

getTray = GED("http://ws.epms.sls.psi.ch/", "getTray").pyclass

getTrayResponse = GED("http://ws.epms.sls.psi.ch/", "getTrayResponse").pyclass

setTray = GED("http://ws.epms.sls.psi.ch/", "setTray").pyclass

setTrayResponse = GED("http://ws.epms.sls.psi.ch/", "setTrayResponse").pyclass

getTrayId = GED("http://ws.epms.sls.psi.ch/", "getTrayId").pyclass

getTrayIdResponse = GED("http://ws.epms.sls.psi.ch/", "getTrayIdResponse").pyclass

getTrayIds = GED("http://ws.epms.sls.psi.ch/", "getTrayIds").pyclass

getTrayIdsResponse = GED("http://ws.epms.sls.psi.ch/", "getTrayIdsResponse").pyclass

removeTray = GED("http://ws.epms.sls.psi.ch/", "removeTray").pyclass

removeTrayResponse = GED("http://ws.epms.sls.psi.ch/", "removeTrayResponse").pyclass

getSampleNames = GED("http://ws.epms.sls.psi.ch/", "getSampleNames").pyclass

getSampleNamesResponse = GED("http://ws.epms.sls.psi.ch/", "getSampleNamesResponse").pyclass

getSampleStatus = GED("http://ws.epms.sls.psi.ch/", "getSampleStatus").pyclass

getSampleStatusResponse = GED("http://ws.epms.sls.psi.ch/", "getSampleStatusResponse").pyclass

test = GED("http://ws.epms.sls.psi.ch/", "test").pyclass

testResponse = GED("http://ws.epms.sls.psi.ch/", "testResponse").pyclass

getSample = GED("http://ws.epms.sls.psi.ch/", "getSample").pyclass

getSampleResponse = GED("http://ws.epms.sls.psi.ch/", "getSampleResponse").pyclass

setSample = GED("http://ws.epms.sls.psi.ch/", "setSample").pyclass

setSampleResponse = GED("http://ws.epms.sls.psi.ch/", "setSampleResponse").pyclass


#ksm-Beginning of Kevin's Code
def xInitConnection():
    try:
        globals()['loc'] = EpmsDatabaseManagerServiceLocator()
        # Old Address
        #globals()['port'] = globals()['loc'].getEpmsDatabaseManagerPort(url="http://x02da-cons-4.psi.ch:8080/ch.psi.sls.epms.ws/EpmsDatabaseManagerService");
        globals()['port'] = globals()['loc'].getEpmsDatabaseManagerPort(url="http://x02da-www-1:8080/ch.psi.sls.epms.ws/EpmsDatabaseManagerService");
    except:
        print 'EPMS Libraries not Loaded Correctly'
        #sys.exit(-1)\
xInitConnection()
## General Rational
# x(d) commands are overlays of the webservice commands to abstract managment from other programs
# when both x and xd exist, x serves as the function that calls xd (for expert mode)

def ExtractUID(sName):
    n=sName.split(':')
    if len(n)>1:
        uName=n[0]
        objName=n[1]
    else:
        uName=''
        objName=sName
    return (uName,objName)
    

# EXAMPLE:: Expert Mode, Get All User-Ids
def xGetUserIDs():
    request = getUserIds();
    response = port.getUserIds(request)
    #for i in (response.UserIds):
    #    print i
    return response.UserIds
def xGetSampleList():
    sampleList=[]
    if expertMode:
        userList=xGetUserIDs()
    else:
        userList=[UserId]
    for cUsr in userList:
        map(sampleList.append,xdGetSampleList(cUsr))
    return sampleList
# EXAMPLE:: GET SAMPLE NAMES
def xdGetSampleList(curUserId=UserId):
    request = getSampleNames()
    request.UserId = curUserId
    response = port.getSampleNames(request)
    #for i in (response.SampleNames):
    #    print i
    return response.SampleNames


def xGetSample(sName):
    sampleList=[]
    (uName,objName)=ExtractUID(sName)
    if len(uName)>0:
        return xdGetSample(objName,uName)
    else:
        if expertMode:
            userList=xGetUserIDs()
            for cUsr in userList:
                try:
                    cSample=xdGetSample(objName,cUsr)
                    return cSample
                except:
                    cSample=[]
            return -1
        else:
            return xdGetSample(objName)

# EXAMPLE:: GET SAMPLE
# HOWTO READ COMPLEX RETURN TYPE
def xdGetSample(sName,curUserId=UserId):
    request = getSample()
    request.UserId=curUserId
    request.SampleName = sName
    response = port.getSample(request)
    curSpot=[]
    if response.Sample.Name==None: 
        response.Sample.Name=''
        print 'Name was null'
    curSpot.append(response.Sample.Name)
    if response.Sample.Comment==None: 
        response.Sample.Comment=''
        print 'Comment was null'
    curSpot.append(response.Sample.Comment)
    curSpot.append(1)
    curSpot.append([])
    tSpot={}
    for i in (response.Sample.PointOfInterests):
        cPos={}
        if i.Name=='NULLPOINT' or (i.Coordinates is None):
            # Do Not Add Empty Spots
            print 'dSpot'
        else:

            cPos['TRXX']=i.Coordinates.Xx
            cPos['TRZZ']=i.Coordinates.Zz
            cPos['TRX']=i.Coordinates.X
            cPos['TRZ']=i.Coordinates.Z
            cPos['TRYV']=i.Coordinates.Y
            cPos['GOXX']=i.Coordinates.GoniometerXX
            cPos['GOZZ']=i.Coordinates.GoniometerZZ
            tSpot[i.Name]=cPos
    tn=tSpot.keys()
    if len(tn)>0:
        tn.sort()
        for cKey in tn:
            curSpot[3].append(tSpot[cKey])
    
    return curSpot


# EXAMPLE:: SET SAMPLE
def xCreateSample(sName,sDesc,traySpot=[],curUserId=UserId):
    request = setSample()
    sample = request.new_sample()
    sample.Name = sName
    sample.Comment = sDesc
    sample.Userid = curUserId
    posLen=len(traySpot)
    # add Saved Positions Array
    if posLen<1:
        pois = sample.new_pointOfInterests()
        pois.Name = 'NULLPOINT'
        pois.Comment = "Filler since the db bans empty pos"
        poiscord = pois.new_coordinates()
        poiscord.CoordinateSystem = 'alignment' #str(self.mainPtr.operationMode)
        cVal=0
        poiscord.Xx = cVal
        poiscord.Zz = cVal
        poiscord.X = cVal
        poiscord.Z = cVal
        poiscord.Y=cVal
        poiscord.GoniometerXX=cVal
        poiscord.GoniometerZZ=cVal
        pois.Coordinates = poiscord
        # Set point of interest to sample
        sample.PointOfInterests.append(pois)
    for ijr in range(0,posLen):
        
        pois = sample.new_pointOfInterests()
        pois.Name = 'P'+str(ijr)
        pois.Comment = "Generated with UserGUI"
        poiscord = pois.new_coordinates()
        poiscord.CoordinateSystem = 'alignment' #str(self.mainPtr.operationMode)
        cVal=0
        poiscord.Xx = cVal
        poiscord.Zz = cVal
        poiscord.X = cVal
        poiscord.Z = cVal
        poiscord.Y=cVal
        poiscord.GoniometerXX=cVal
        poiscord.GoniometerZZ=cVal
        rItems=traySpot[ijr].items()
        for cItem in rItems:
            cName=cItem[0]
            cVal=cItem[1]
            if cName=='TRXX':
                poiscord.Xx = cVal
            elif cName=='TRZZ':
                poiscord.Zz = cVal
            elif cName=='TRX':
                poiscord.X = cVal
            elif cName=='TRZ':
                poiscord.Z = cVal
            elif cName=='TRYV':
                poiscord.Y=cVal
            elif cName=='GOXX':
                poiscord.GoniometerXX=cVal
            elif cName=='GOZZ':
                poiscord.GoniometerZZ=cVal
            else:
                print cName+' is nicht bekannt'
            
            
            
        # Set coordinates of point of interest
        pois.Coordinates = poiscord
        # Set point of interest to sample
        sample.PointOfInterests.append(pois)
    # Set sample to request
    request.Sample = sample
    # Call function
    response = port.setSample(request)

def xGetTrayId(sName):
    sampleList=[]
    (uName,objName)=ExtractUID(sName)
    if len(uName)>0:
        return xdGetTrayId(objName,uName)
    else:
        if expertMode:
            userList=xGetUserIDs()
            for cUsr in userList:
                try:
                    cSample=xdGetTrayId(objName,cUsr)
                    return cSample
                except:
                    cSample=[]
            return -1
        else:
            return xdGetTrayId(objName)
# EXAMPLE:: GET TRAY ID
def xdGetTrayId(sName,curUserId=UserId):
    request = getTrayId()
    request.UserId = curUserId
    request.SampleName = sName
    response = port.getTrayId(request)
    #print response.TrayId
    return response.TrayId


def xGetTrayList():
    trayList=[]
    if expertMode:
        userList=xGetUserIDs()
    else:
        userList=[UserId]
    for cUsr in userList:
        map(trayList.append,xdGetTrayList(cUsr))
    return trayList
# EXAMPLE:: GET TRAY IDS
def xdGetTrayList(curUserId=UserId):
    request = getTrayIds()
    request.UserId = curUserId
    response = port.getTrayIds(request)
    #for i in (response.TrayIds):
    #    print i
    return response.TrayIds



# Get all samples names in all trays
def xdGetAllSamplesInTrays():
    trayList=xdGetTrayList()
    sampleNameList=[]
    for cTrayId in trayList:
        request = getTray()
        request.TrayId = cTrayId
        response = port.getTray(request)
        for i in (response.Tray.Positions):
            sampleNameList.append(i.SampleName)
    return sampleNameList
            
# EXAMPLE:: GET TRAY
def xGetWholeTray(trayId):
    request = getTray()
    request.TrayId = trayId
    response = port.getTray(request)
    if response.Tray.Script==None: 
        response.Tray.Script=''
        print 'Script was null'
    print response.Tray.Id+' has been loaded'
    CurTray=[]
    for ij in range(0,trayY):
            curRow=[]
            for ik in range(0,trayX):
                # array outline (name,desc,toLoad,Pos)
                curRow.append([tArray[ik]+ij.__str__(),'',0,[]])
            CurTray.append(curRow)
    for i in (response.Tray.Positions):
        #print i.Row
        #print i.Column
        #print i.UserId
        #print i.SampleName
        CurTray[i.Row][i.Column]=xdGetSample(i.SampleName,i.UserId)
        
        #print "----"
    return [CurTray,response.Tray.Script]
# EXAMPLE:: SET TRAY
def xCreateTray(trayId,CurTray,script='',curUserId=UserId):
    
    request = setTray()
    tray = request.new_tray()
    tray.Id = trayId.upper()
    tray.Script = script
    for ik in range(0,len(CurTray[0])):
            for ij in range(0,len(CurTray)):
                if CurTray[ij][ik][2]:
                    pos = tray.new_positions()
                    pos.Column = ik
                    pos.Row = ij
                    pos.SampleName = CurTray[ij][ik][0]
                    pos.UserId = curUserId
                     # desc
                    xCreateSample(CurTray[ij][ik][0],CurTray[ij][ik][1],CurTray[ij][ik][3])
                    tray.Positions.append(pos)
    request.Tray = tray
    response = port.setTray(request)
def xDelTray(trayId):
    if expertMode==1:
        xdDelTray(trayId)
    else:
        print 'Expert User Needed To Delete Tray!'


# EXAMPLE:: REMOVE TRAY
def xdDelTray(trayId):
    request = removeTray()
    request.TrayId = trayId
    response = port.removeTray(request)
def xGetSampleStatus(sName,curUserId=''):
    
    if expertMode:
        userList=xGetUserIDs()
    else:
        userList=[UserId]
    if curUserId!='': userList=[curUserId]
    for cUsr in userList:
        cVal=xxGetSampleStatus(sName,curUserId=cUsr)
        if cVal>0: return cVal
    return 0
def xxGetSampleStatus(sName,curUserId=UserId):
    request = getSampleStatus()
    request.UserId=curUserId
    request.SampleName = sName
    response = port.getSampleStatus(request)
    return response.SampleStatus
def etablePrint(aMat):
    maxLen=22
    outStr=''
    for a in aMat:
        aS=str(a)
        aS=aS[:maxLen-2]
        outStr+=aS+' '*(maxLen-len(aS))
    return outStr
    print outStr
def tablePrint(aMat):
    outStr=''
    for a in aMat:
        outStr+=str(a)+'\t\t'
    print outStr
def xListSamples():
    # Code to print the list of samples for the current user and their status
    print 'Listing Samples...'
    tablePrint(['User','Sample','Status'])
    StatusText=['Created','Aligned','Measured','Reconstructed']
    if expertMode:
        userList=xGetUserIDs()
    else:
        userList=[UserId]
    for cUsr in userList:
        printMat=[]
        statusMat=[]
        for samp in xdGetSampleList(cUsr):
            cStat=xGetSampleStatus(samp,cUsr)
            printMat.append([cUsr,samp,StatusText[cStat]])
            statusMat.append(cStat)
        if useSort:
            sortedMat=list(array(statusMat).argsort())
        else:
            sortedMat=range(0,len(statusMat))
        for cDex in sortedMat:
            tablePrint(printMat[cDex])
if __name__ == '__main__':
    print 'Tomcat Database Sample Connectivity Tool'
    xListSamples()

        
    #print xdGetSample('BaconRoll')